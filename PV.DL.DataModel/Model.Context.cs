//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PV.DL.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PVEntities : DbContext
    {
        public PVEntities()
            : base("name=PVEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DetalleCompras> DetalleCompras { get; set; }
        public virtual DbSet<DetalleVentas> DetalleVentas { get; set; }
        public virtual DbSet<Marcas> Marcas { get; set; }
        public virtual DbSet<Productos> Productos { get; set; }
        public virtual DbSet<Proveedores> Proveedores { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Sesiones> Sesiones { get; set; }
        public virtual DbSet<TipoPagos> TipoPagos { get; set; }
        public virtual DbSet<TipoProductos> TipoProductos { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<Ventas> Ventas { get; set; }
    
        public virtual int LOGEO(string usuario, string contraseña, ObjectParameter logeado, ObjectParameter mensaje)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LOGEO", usuarioParameter, contraseñaParameter, logeado, mensaje);
        }
    
        public virtual ObjectResult<ProcedureDetalleVenta_Result> ProcedureDetalleVenta()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcedureDetalleVenta_Result>("ProcedureDetalleVenta");
        }
/*
        public object BusquedaProcedureUsuario(string busqueda)
        {
            throw new NotImplementedException();
        }
        */

        public virtual ObjectResult<ProcedureProducto_Result> ProcedureProducto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcedureProducto_Result>("ProcedureProducto");
        }
    
        public virtual ObjectResult<ProcedureSesion_Result> ProcedureSesion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcedureSesion_Result>("ProcedureSesion");
        }
    
        public virtual ObjectResult<ProcedureTipoProducto_Result> ProcedureTipoProducto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcedureTipoProducto_Result>("ProcedureTipoProducto");
        }
    
        public virtual ObjectResult<ProcedureUsuario_Result> ProcedureUsuario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcedureUsuario_Result>("ProcedureUsuario");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<BusquedaProcedureUsuario_Result> BusquedaProcedureUsuario(ObjectParameter nombre)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusquedaProcedureUsuario_Result>("BusquedaProcedureUsuario", nombre);
        }
    }
}
